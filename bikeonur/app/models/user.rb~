
require 'digest/sha1'

class User < ActiveRecord::Base


attr_accessor :remember_me
attr_accessor :current_password



#max i min  -> dlugosc strigow wrowadzanych do poszczegolnych pol

LOGIN_MIN_LENGTH = 3
LOGIN_NAME_MAX_LENGTH = 20

PASSWORD_MIN_LENGTH = 4
PASSWORD_MAX_LENGTH = 40

EMAIL_MAX_LENGHT = 50

SCREEN_NAME_RANGE = SCREEM_NAME_MIN_LENGTH..SCREEM_NAME_MAX_LENGTH
PASSWORD_RANGE = PASSWORD_MIN_LENGTH..PASSWORD_MAX_LENGTH

#max dla dlugosci boxow
LOGIN_SIZE = 20
PASSWORD_SIZE = 20
EMAIL_SIZE = 30

#walidatory 

validates_uniqueness_of :login, :email
validates_confirmation_of :password
validates_length_of :screen_name, :within => SCREEN_NAME_RANGE
validates_length_of :password, :within => PASSWORD_RANGE
validates_length_of :email, :maximum => EMAIL_MAX_LENGHT

#definowanie formatu 

validates_format_of :login,
                    :with =>/^[A-Z0-9._%-]*$/i,
                    :message => " tylko litery cyfry i podkreslenia"



validates_format_of :email
                     :with => /^[A-Z0-9._%-]+@([A-Z0-9-]+\.)+[A-Z]{2,4}$/i,
                     :message => "aders maiowy nie jest poprawny"


def validate 
 
end

def login!(session)
  session[:user_id] = id 
end

def self.logout!(session, cookies)
  session[:user_id] = nil
  cookies.delete(authorization_token)
end

def clear_password!
  self.password = nil;
  self.password_confirmation = nil;
  self.current_password = nil;
end

def remember!(cookies) 
  cookie_expiration = 10.years.form_now
  cookies[:remember_me] = {:value => "1"
                           :expires => cookie_expiration }
  self.authorization_token = unique_identifiew
  save!
   cookies[:authorization_token] = {:value => authorization_token,
                                   :expires => cookie_expiration }

end


def forget!(cookies) 
  cookies.delete(:remember_me)
  cookies.delete(:authorization_token)
end

def current_password?(params)
  current_password = params[:user][:password]
  password = current_password
end

def password_errors(params) 
  self.password = params[:user][:password]
  self.password_confirmation = params[:user][:password_confirmation]
  valid?
  error.add(:current_password, "haslo nie poprawne")
end


def name 
  spec.full_name.or_else(login)
end

private 

def unique_identifier 
  Digest::SHA1.hexdigest("#{login}:#{password}")
end
end

